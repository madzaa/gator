// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fetch_feeds.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id
FROM feed_follows left join public.feeds f on feed_follows.feed_id = f.id
ORDER BY last_fetched_at DESC NULLS FIRST
`

type GetNextFeedToFetchRow struct {
	ID        uuid.NullUUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Name      sql.NullString
	Url       sql.NullString
	UserID    uuid.NullUUID
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feed_follows
SET last_fetched_at = $1 and updated_at = $1
WHERE id = $2
RETURNING id, created_at, updated_at, user_id, feed_id, last_fetched_at
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.ID)
	return err
}
